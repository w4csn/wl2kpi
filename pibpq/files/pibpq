#!/bin/bash
## This script should be called pibpq and should be located in /usr/local/sbin.
## If the PIBPQ script is not found there, then complain and exit.

LOGFILE="/var/log/pibpq.log"

### Functions ###
####### This function asks the user to type in a new source URL
ask_user_for_source_url() {

   cd ~
   rm -f /home/pi/test.txt;
   echo "test" > /home/pi/test.txt
   rm -f /home/pi/testfile_txt;
   _success=0

   while [ $_success -eq 0 ];
   do
      echo
      echo  "Please tell me the source URL from which I'll be getting TARPN code:"
      echo  "Example URL: http://www.torborg.com/tarpncode"
      echo
      echo  "The source URL we were using up until now is:"
      cat   /usr/local/sbin/source_url.txt
      sleep 0.5
      echo
      sleep 0.5
      echo  "  You can do control C to exit leaving the URL the way it was."
      sleep 0.5
      echo
      sleep 0.5
      echo  "Enter URL with http:// but without a terminating slash."
      echo  -n "-->"
      read _url;

      echo
      echo -n "I saw source URL="
      echo $_url

      _tarpn_url_test_addr=$_url/testfile.txt
      #echo -n "test address ="
      #echo $_tarpn_url_test_addr
      echo
      rm -f testfile.txt
      echo
      sleep 1
      wget -o /dev/null $_tarpn_url_test_addr
      #-o /dev/null
      if [ -f testfile.txt ];
      then
         #echo "received testfile.txt"
         grep -q "test data" testfile.txt
         if [ $? -ne 0 ] ;
         then
            rm -f testfile.txt
            echo "ERROR1:  Failure acquiring test data from new source URL"
            echo "         try again... or Control-C to abort"
            sleep 1
         else
            echo
            echo "source URL confirmed"
            rm -f testfile.txt
            rm -f /home/pi/source_url.txt
            echo $_url > /home/pi/source_url.txt
            sudo mv /home/pi/source_url.txt /usr/local/sbin/source_url.txt
            sleep 1
            echo
            echo "source URL saved -- next update or BPQ node restart will be from the new source URL"
            sleep 1
            echo
            _success=1;
            echo
         fi
      else
         sleep 0.5
         echo
         sleep 0.5
         echo
         echo "ERROR:  Failure acquiring test data from URL"
         sleep 0.5
         echo
         echo "try again... or Control-C to abort"
         sleep 1
         echo
      fi
      rm -f sourceurl_test.txt
   done
}


###### Test to see if a particular process is running using grep.  Returns 1 if yes, 0 if no.
###### If no process is specified, returns 0.
check_process() {
  #  echo "$ts: checking $1"
  [ "$1" = "" ]  && return 0
  [ `pgrep -n $1` ] && return 1 || return 0
}


echo_sleep_countdown() {
   sleep 0.5
   echo "10"
   sleep 0.5
   echo "9"
   sleep 0.5
   echo "8"
   sleep 0.5
   echo "7"
   sleep 0.5
   echo "6"
   sleep 0.5
   echo "5"
   sleep 0.5
   echo "4"
   sleep 0.5
   echo "3"
   sleep 0.5
   echo "2"
   sleep 0.5
   echo "1"
   sleep 0.5
   echo "0"
   return 0;
}



 
### End Functios###


#### Main ###
echo "#### =PIBPQ v1 =" 
### v1 2020-07-221 -- Initial Version. 

## Make sure the raspberry PI does an FSCK when it boots next time.
sudo touch /forcefsck


############## This script may only be executed by user "pi".
if [ $(whoami) != "pi" ]; then
   echo "Hello user " $(whoami);
   if [ $(whoami) != "root" ]; then
      echo "The PIBPQ script should only be run by user pi"
      exit 1
   else
      echo "Be careful starting this script from root.  Only do diagnostics from root!"
   fi
fi

################ CHECK Operating system Version
TEMP_PARSE_FILE="/home/pi/temp_parsing.txt";

sudo rm -f $TEMP_PARSE_FILE
cat /etc/*-release | grep "VERSION" | grep "10 (buster)" > $TEMP_PARSE_FILE
if grep -q "VERSION" $TEMP_PARSE_FILE;
then
        echo -n
else
        echo "This script does not support the Linux version reported in /etc"
        echo "for the PIBPQ installation.   Quitting now."
        cat /etc/*-release
        sudo rm -f $TEMP_PARSE_FILE
        exit 1
fi
sudo rm -f $TEMP_PARSE_FILE

############## This script should be called pibpq and should be located in /usr/local/sbin.
############## If another script was run, then complain and exit.
        _name="/usr/local/sbin/pibpq"
        if [ $_name == $0 ];
        then
                echo -n
        else
                echo "ERROR#0!  PIBPQ Installation failure."
                echo "ERROR!    Aborting"
                exit 1;
        fi


        ############## The runbpq script should be located in /usr/local/sbin.
        ############## If runbpq is not found, then complain and exit.
        if [ -f /usr/local/sbin/runbpq.sh ];
        then
                echo -n
        else
                echo "ERROR#2!  /usr/local/sbin/runbpq.sh is missing.  This is bad.  "
                echo "          it should be located in /usr/local/sbin"
                echo "ERROR!   Aborting"
                exit 1;
        fi


_is_raspberry_pi_3=0;
################ Check to see if this version of Raspberry PI is supported.
################ We like versions 000e and 000f as found in the /proc/cpuinfo file.
cd ~
#if [ -f /usr/local/etc/board_id.txt ];
#then
#   _boardID=$( cat $/usr/local/etc/board_id.txt );

temp_parsing_file="tempFileForParsing.txt"

rm -f $temp_parsing_file;
cat /proc/cpuinfo | grep Revision > $temp_parsing_file
chmod 644 $temp_parsing_file;
_counta=$( cat $temp_parsing_file );
_countb=${_counta:11}

_value8="a02082"   #### Raspberry PI 3 B
_value9="a22082"   #### Bob's Raspberry PI 3 B
_value10="a22042"   #### 2 Model B (with BCM2837)a32082
_value11="a32082"   #### 3 Model B  Sony Japan
_value12="a020d3"   #### 3 Model B+ England 3-19-2018
_value4B1="a03111"   #### Raspberry PI 4B 1GB from PiHUT July 2019
_value4B2="b03111"   #### Raspberry PI 4B 2GB July 2019
_value4B4="c03111"   #### Raspberry PI 4B 4GB July 2019
_value4B5="a03112"   #### Raspberry Pi 4 Model B Rev 1.2 1GB
_value4B6="b03112"   #### Raspberry Pi 4 Model B Rev 1.2 2GB
_value4B7="c03112"   #### Raspberry Pi 4 Model B Rev 1.2 4GB

_value0="000d"     #### Red B+ Chinese
_value1="000e"
_value2="000f"
_value3="0010"     ### Raspberry PI B+ v1.2
_value4="a21041"   ### Raspberry PI 2 B
_value5="a01041"   ### also Raspberry PI 2 B ??  v1.1
_value6="0013"     ### Raspberry PI B + v2
_value7="900092"   #### Raspberry PI Zero
_valueA="a22032"   #### Dylan's PI 2 B V1.2

                                             




_version_ok=0
_good_result=1
if [ $_value4B5 == $_countb ]; then
     echo "type 4 B v1.2 1GB UK <<<" > /home/pi/hardware.txt
    _is_raspberry_pi_3=1
     _version_ok=1
    fi
if [ $_value4B6 == $_countb ]; then
     echo "type 4 B v1.2 2GB UK <<<" > /home/pi/hardware.txt
    _is_raspberry_pi_3=1
     _version_ok=1
    fi
if [ $_value4B7 == $_countb ]; then
     echo "type 4 B v1.2 4GB UK <<<" > /home/pi/hardware.txt
    _is_raspberry_pi_3=1
     _version_ok=1
    fi
if [ $_value4B1 == $_countb ]; then
     echo "type 4 B 1GB made in UK <<<" > /home/pi/hardware.txt
    _is_raspberry_pi_3=1
     _version_ok=1
    fi
if [ $_value4B2 == $_countb ]; then
     echo "type 4 B 2GB made in UK <<<" > /home/pi/hardware.txt
    _is_raspberry_pi_3=1
     _version_ok=1
    fi
if [ $_value4B4 == $_countb ]; then
     echo "type 4 B 4GB made in UK <<<" > /home/pi/hardware.txt
    _is_raspberry_pi_3=1
     _version_ok=1
    fi
if [ $_value8 == $_countb ]; then
     echo "type 3 B  --bluetooth/wifi  <<<" > /home/pi/hardware.txt
    _is_raspberry_pi_3=1
     _version_ok=1
    fi
if [ $_value9 == $_countb ]; then
     echo "type 3 B  --bluetooth/wifi  <<<" > /home/pi/hardware.txt
     _is_raspberry_pi_3=1
     _version_ok=1
    fi
if [ $_value11 == $_countb ]; then
    echo "type 3 B  Sony Japan <<<" > /home/pi/hardware.txt
    _is_raspberry_pi_3=1
    _version_ok=1
   fi
if [ $_value12 == $_countb ]; then
    echo "type 3 B +  England?? <<<" > /home/pi/hardware.txt
    _is_raspberry_pi_3=1
    _version_ok=1
   fi

if [ $_version_ok -ne $_good_result ]; then
   if [ $_value0 == $_countb ]; then
       echo "unknown good HW#0.. tell tadd@mac.com  <<<" > /home/pi/hardware.txt
       _version_ok=1
       fi
   if [ $_value1 == $_countb ]; then
       echo "unknown good HW#1.. tell tadd@mac.com  <<<" > /home/pi/hardware.txt
       _version_ok=1
       fi
   if [ $_value2 == $_countb ]; then
        echo "unknown good HW#2.. tell tadd@mac.com  <<<" > /home/pi/hardware.txt
        _version_ok=1
        fi
   if [ $_value3 == $_countb ]; then
        echo "type B+ V1.2 <<<" > /home/pi/hardware.txt
       _version_ok=1
       fi
   if [ $_value4 == $_countb ]; then
        echo "type 2 B" > /home/pi/hardware.txt
        _version_ok=1
       fi
   if [ $_value5 == $_countb ]; then
        echo "type 2 B v1.1 <<<" > /home/pi/hardware.txt
        _version_ok=1
       fi
   if [ $_value6 == $_countb ]; then
        echo "type B + v2 <<<" > /home/pi/hardware.txt
        _version_ok=1
       fi
   if [ $_valueA == $_countb ]; then
       echo "type 2 B  V1.2 <<<" > /home/pi/hardware.txt
       _version_ok=1
      fi
   if [ $_value10 == $_countb ]; then
       echo "type 2 B (with BCM2837) <<<" > /home/pi/hardware.txt
       _version_ok=1
      fi
fi

if [ $_version_ok -ne $_good_result ]; then
    echo "PROC CPUINFO:"
    cat /proc/cpuinfo
    sleep 1
    echo
    echo "you have an unexpected version of Raspberry PI"
    echo "PIBPQ is not supported on this version, so far."
    rm -f $temp_parsing_file;
    cat /proc/cpuinfo > $LOGFILE
    echo -n "unexpected version of Raspberry PI" >> $LOGFILE
    date >> $LOGFILE
    exit 0
    fi
sudo mv /home/pi/hardware.txt /usr/local/etc/hardware.txt

rm -f $temp_parsing_file;

echo -n "pibpq $1 $2 $3 $4           @" >> $LOGFILE
date >> $LOGFILE

############################################## PIBPQ SYSINFO
if [ foo$1 = "foosysinfo" ];
then
   echo -e "\n\n\n\n\n\n\n\nSYSINFO"
   echo -e "###########################################################"
   echo "##### Device-Tree / Model  ############################"
   cat /proc/device-tree/model
   echo
   echo
   echo -e "###########################################################"
   echo "##### PIBPQ SERVICE############################"
   sudo systemctl status tarpn.service > ~/sysctl_status.txt
   cat ~/sysctl_status.txt
   rm ~/sysctl_status.txt

   echo -e "\n\n\n\n\n\n\n\n###########################################################"

   echo "##### last 50 lines of /var/log/pibpq.log"
   echo "#####"
   tail -n50 /var/log/pibpq.log


   echo -e "\n\n\n\n\n\n\n\n###########################################################"

   echo "###########################################################"
   echo "##### STATUSMONITOR SERVICE############################"
   sudo systemctl status statusmonitor.service > ~/statusmonitor_status.txt
   cat ~/statusmonitor_status.txt
   rm ~/statusmonitor_status.txt


   echo -e "\n\n\n\n\n\n\n\n###########################################################"

   echo "###########################################################"
   echo "##### PI SHUTDOWN SERVICE############################"
   sudo systemctl status pi_shutdown.service > ~/sysctl_status.txt
   cat ~/sysctl_status.txt
   rm ~/sysctl_status.txt


   echo -e "\n\n\n\n\n\n\n\n###########################################################"

   echo "##### last 50 lines of /var/log/pibpq_pwrman.log"
   echo "#####"
   tail -n50 /var/log/pibpq_pwrman.log

   echo -e "\n\n\n\n\n\n\n\n###########################################################"

   #echo -e "###########################################################"
   #echo "##### TARPN HOME############################"
   #sudo systemctl status home.service > ~/sysctl_status.txt
   #cat ~/sysctl_status.txt
   #rm ~/sysctl_status.txt
   #echo -e "\n\n\n\n\n\n\n\n###########################################################"
   #tail -n100 /var/log/home.log

   echo -e "\n\n\n\n###########################################################"
   echo "USB devices:"
   lsusb

   echo -e "\n\n\n\n\n\n\n\n###########################################################"
   echo "###########################################################"
   echo "CPU INFO"
   cat /proc/cpuinfo

   echo
   echo -e "\n\n\n\n\n\n\n\n###########################################################"
   echo "###########################################################"
   echo "df:      Disk partition usage"
   df -H

   echo
   echo -e "\n\n\n\n\n\n\n\n###########################################################"
   echo "###########################################################"
   echo "ps axfo pid,tty,time,psr,command --cols 200      Hierarchical process list"
   ps axfo pid,tty,time,psr,command --cols 200

   echo
   echo -e "\n\n\n\n###########################################################"
   echo "UNAME -a"
   uname -a
   echo
   echo -e "\n\n\n\n###########################################################"
   echo "/opt/vc/bin/vcgencmd version       GET FIRMWARE VERSION"
   /opt/vc/bin/vcgencmd version

   echo
   echo -e "\n\n\n\n###########################################################"
   echo "free -m     memory usage stats in megabytes"
   free -m

   echo -e "\n\n\n\n\n\n\n\n###########################################################"
   echo "###############################################"
   echo "cat /etc/*-release"
   cat /etc/*-release

   echo -e "\n\n\n\n\n\n\n\n###########################################################"
   echo "###############################################"
   echo "/opt/vc/bin/vcgencmd measure_temp        get CPU temperature"
   /opt/vc/bin/vcgencmd measure_temp

   #echo -e "\n\n\n\n###########################################################"
   #echo "###############################################"
   #echo -n "source URL:"
   #cat /usr/local/sbin/source_url.txt

   echo -e "\n\n\n\n###########################################################"
   echo "###############################################"
   echo -n "UPTIME    "
   uptime
   echo -n "Up Since: "
   uptime -s
   #echo -e "\n\n\n\n###########################################################"
   #echo "Check flags to see when updateapps and installs were run:"
   #ls -l /usr/local/sbin/*.flag > ~/temp.foo
   #echo -n "TARPN Install Started on:  "
   #grep tarpn_start1dl.flag ~/temp.foo | cut -b27-39
   #echo -n "TARPN Install Completed on:"
   #grep tarpn_start2.flag ~/temp.foo | cut -b27-39
   #echo -n "UpdateApps Last started:   "
   #if [ -f /usr/local/sbin/last_update_apps_start.flag ];
   #then
   #    grep last_update_apps_start.flag ~/temp.foo | cut -b27-39
   #else
   #    echo "NEVER"
   #fi
   #echo -n "UpdateApps Last completed: "
   #if [ -f /usr/local/sbin/last_update_apps_completed.flag ];
   #then
   #    grep last_update_apps_completed.flag ~/temp.foo | cut -b27-39
   #else
   #    echo "NEVER"
   #fi
   #rm ~/temp.foo
   echo
   echo -e "\n\n\n\n###########################################################"
   echo "script versions:"

   grep "\--VERSION--" /usr/local/sbin/runbpq.sh | cut -d= -f2

   #grep "\--VERSION--" /usr/local/sbin/tarpn_start2.sh | cut -d= -f2

   #grep "\--VERSION--" /home/pi/bpq/make_local_cfg.sh | cut -d= -f2

   #grep "\--VERSION--" /home/pi/bpq/configure_node_ini.sh | cut -d= -f2

   echo -n "pi_shutdown_background.sh "
   grep "\--VERSION--" /usr/local/sbin/pi_shutdown_background.sh | cut -d- -f6

   grep "pibpq_background" /usr/local/sbin/pibpq_background.sh | cut -d= -f2

      /home/pi/bpq/linbpq -v
   echo -e "\n\n\n\n###########################################################"
   ##dpkg -l | grep '^i'
  exit 0;
fi


################ Check to make sure the tarpn service is running.
TEMP_PARSE_FILE2="/home/pi/temp_parsing2.txt";

sudo rm -f $TEMP_PARSE_FILE2
sudo systemctl status tarpn.service | grep "Active:" > $TEMP_PARSE_FILE2
if grep -q "active (running) since" $TEMP_PARSE_FILE2;
then
   echo -n
else
   echo "ERROR!  tarpn.service is not running!"
   cat $TEMP_PARSE_FILE2;
   echo "Do your command again or re-install PIBPQ"
   sudo rm -f $TEMP_PARSE_FILE2
   exit 1
fi
sudo rm -f $TEMP_PARSE_FILE2



####### Check for a valid argument by comparing the argument with fooargument.
####### if = foo, then no argument.
####### if no argument, then give status of the node
if [ foo$1 = "foo" ]; then
   grep -e "=PIBPQ" /usr/local/sbin/pibpq | cut -d= -f2 | head -n1 >> $LOGFILE
   grep "BACKGROUND:" /usr/local/etc/background.ini > $TEMP_PARSE_FILE2

   check_process "linbpq"
   if [ $? -ge 1 ]; then
      echo -n "##### BPQ node is running.     "
   else
      echo -n "##### BPQ node is NOT running. "
   fi

   if grep -q ":ON" $TEMP_PARSE_FILE2; then
      echo "BPQ node background Service is (AUTO)"
   else
      echo "BPQ node background Service STOPPED"
   fi


   echo -n "##### Raspberry PI is a >>>  "
   cat /usr/local/etc/hardware.txt
   echo -n "##### OS version is "
   cat /etc/*-release | grep PRETTY | cut -b 13-
   echo -n "##### Ethernet MAC="
   if [ -f /sys/class/net/eth0/address ]; 
   then
      cat /sys/class/net/eth0/address > $TEMP_PARSE_FILE
   else   
      cat /sys/class/net/en*/address > $TEMP_PARSE_FILE
   fi
   /opt/vc/bin/vcgencmd measure_temp >> $TEMP_PARSE_FILE
   sed ':a;N;$!ba;s/\n/   CPU /g' $TEMP_PARSE_FILE > $TEMP_PARSE_FILE2
   if [ -f /usr/local/sbin/tarpn_start1dl_starttime.txt ];
   then
      echo -n "@@@" >> $TEMP_PARSE_FILE2
      cat /usr/local/sbin/tarpn_start1dl_starttime.txt >> $TEMP_PARSE_FILE2
      sed ':a;N;$!ba;s/\n/ /g' $TEMP_PARSE_FILE2 > $TEMP_PARSE_FILE
      sed 's/@@@/  SDcard=/g' $TEMP_PARSE_FILE > $TEMP_PARSE_FILE2
      cat $TEMP_PARSE_FILE2
      rm -r $TEMP_PARSE_FILE
      rm -r $TEMP_PARSE_FILE2
   else
      cat $TEMP_PARSE_FILE2
      rm -r $TEMP_PARSE_FILE
      rm -r $TEMP_PARSE_FILE2
   fi
   echo "#####   Use tarpn help     for subcommand list."
   exit 0
fi

##########################   TARPN HELP
if [ $1 = "help" ]; then
   echo "arguments are:"
   echo "tx       -- Make a connection to your node for outgoing connectivity"
   echo "            note: the command 'tx' can be done from $ os prompt as well."
   echo "            you can have multiple tx outbound sessions at a time.  Use"
   echo "            the host command for inbound connections.  Also see the"
   echo "            BPQtermTCP program.  BPQtermTCP is easier for outgoing connections."
   echo
   echo "host     -- Start a special version of minicom to wait for an inbound"
   echo "            connection using a virtual TNC-PI.  May also be used for outbound."
   echo "            Only one 'host' session can be launched at a time.  Use  tx  or"
   echo "            BPQtermTCP for outbound connections because you can have many of "
   echo "            those at a time."
   echo "            Note: the command 'host' can be done from $ os prompt as well."
   echo
   echo "shutdown -- Tell the Raspberry PI's operating system to shut down."
   echo "            You should always do this before removing power.  You should"
   echo "            remove power before plugging or unplugging TNC-PI or SDCARD."
   echo
   echo "config   -- Configure the G8BPQ node.  This prompts you to specify "
   echo "            callsigns, node name, neighbors, and other details used"
   echo "            by the G8BPQ software.  Config can only be run if the node"
   echo "            is not running."
   echo
   echo
   echo "test     -- Immediately launch BPQ node as user"
   echo "            application.  This is useful for seeing if there are any errors"
   echo "            in node.ini or the resulting configuration for the node."
   echo "            Always test the node if any changes are made before starting the"
   echo "            node as a service."
   echo "            test is not valid if the BPQ node is running already as a service. "
   echo "            Use tarpn service stop to stop the auto session before testing."
   echo "            Note: It is ok to have multiple ssh sessions into your PI but"
   echo "            not to have multiple G8BPQ node apps running at a time."
   echo
   echo "conspy   -- Monitors the console output for BPQ node background process."
   echo "            This is useful when doing a stop command and the BPQ node is"
   echo "            set to run automatically.  Note: Run this command from a 2nd ssh."
   echo "            To exit conspy, hit ESCAPE 3 times in a row."
   echo
   echo "kill     -- Performs a system kill to the BPQ node process.  This will cause"
   echo "            the node to start over.  This also re-reads the node.ini file."
   echo
   echo "service  -- Check or control the operation of the G8BPQ node as a background"
   echo "            service.  Use this with: start  or  stop"
   echo "            tarpn service start    will configure the backgound process to"
   echo "                                   launch G8BPQ-node any time it is seen to"
   echo "                                   not be running. "
   echo "            tarpn service stop     will configure the background process to"
   echo "                                   ignore the G8BPQ-node execution and also"
   echo "                                   will stop the node process if node was"
   echo "                                   called by the background process."
   echo
   echo "usb      -- Lists the ttyUSB and ttyACM devices found in /dev and then checks lists which"
   echo "            USB devices are called out in the node.ini file (taprn config)."
   echo
   echo "i2c      -- Read the I2C bus and find out what TNC-PI addresses are currently"
   echo "            attached to the top of the Raspberry PI.  Note that the address"
   echo "            readout is in HEXADECIMAL."
   echo "            Use this web page:"
   echo "            http://www.binaryhexconverter.com/hex-to-decimal-converter"
   echo "            to convert the HEX addresses to decimal, one at a time, for your"
   echo "            convenience.  Sorry."
   echo "            Note: I2C commands will not work if the G8BPQ node software is running."
   echo
   echo "i2c-assign- rescue an async TNC-PI and move it to I2C bus at address 09.  This is an"
   echo "            initialization procedure usually done once to a red TNC-PI or of a TNC-PI"
   echo "            resets badly.  TNC-PI can be reset badly if the ribbon cable is attached"
   echo "            wrong or if the TXDELAY pot is set to 0 during a regular reset or power up."
   echo "            tarpn i2c-assign is performed with only one TNC-PI attached and is usually"
   echo "            not needed with a green TNC-PI board."
   echo "            If performed on a modern Raspberry PI (3 or newer) the program will need"
   echo "            to reset your Raspberry PI.  This will be taken care of automatically." 
   echo "            Note: I2C commands will not work if the G8BPQ node software is running."
   echo
   echo "i2c-set  -- write a parameter change to a TNC-PI at a particular I2C address"
   echo "            use with address in decimal, parameter number, and new value"
   echo "            Example:"
   echo "            tarpn i2c_set 16 1 60   set TNC address 16decimal parameter 1 to 60."
   echo "            Note: I2C commands will not work if the G8BPQ node software is running."
   echo
   echo "i2c-get  -- read all parameters from a TNC-PI at a particular address"
   echo "            use with TNC-PI address in decimal.  Reads all parameters."
   echo "            Example:"
   echo "            tarpn i2c-get 16   reads all from TNC-PI at i2c address 16 decimal."
   echo "            Note: I2C commands will not work if the G8BPQ node software is running."
   echo
   echo "i2c-beep -- Tell the selected TNC-PI to transmit and send beep tones for a test."
   echo "            tarpn i2c-beep 5   key up TNC-PI at i2c address 5 and make test tones."
   echo "            Note: I2C commands will not work if the G8BPQ node software is running."
   echo
   echo "async-get   Read registers from an async TNC-PI.  This is useful to find out if"
   echo "            your TNC-PI is in async mode, and if your Raspberry PI's async bus is"
   echo "            accessible."
   echo 
   echo "ip       -- print IP address."
   echo
   echo "sysinfo  -- Performs passive system queries and prints the results."
   echo "            This is useful for discovering what hardware and software parts"
   echo "            are installed.  The features of this command will no doubt"
   echo "            be expanded as time goes on."
   echo
   echo
   echo "updateapps- Go out to the Internet and pull down the latest versions of several"
   echo "            applications, drivers, and utilities.  This command takes a"
   echo "            while to execute."
   echo
   echo
   echo "reboot   -- Shuts down and restarts the Raspberry PI OS."
   echo "            Initiates file system check FSCK when booting."
   echo
   echo "linktest -- Causes a radio to transmit 100 test packets."
   echo
   echo "listen   -- Indefinitely displays INFO frame packets from specified port#."
   echo
   echo "PI LINBPQ Packet Node"
   exit 0
fi;


############################################## PIBPQ LAN
if [ $1 = "ip" ];
then
   echo -n "My IP address is " 
   hostname -I | cut -d' ' -f1
   echo -n "Router info:"
   ip r | grep default
   echo "DNS server info:"
   cat /etc/resolv.conf

   exit 0;
fi

############################################## PIBPQ PS
if [ $1 = "ps" ];
then
   ps auf
   exit 0;
fi

############################################## PIBPQ I2C
if [ $1 = "i2c" ];
then
   if [ -f /home/pi/pitnc_getparams ];
   then
      sudo mv pitnc* /usr/local/sbin
   fi
   check_process "linbpq"
   if [ $? -ge 1 ]; then
       echo "ERROR!  I2C commands cannot be run if the G8BPQ node software is running."
       echo "        Quit the node software and/or perform service stop if necessary."
       exit 1
   fi
   if [ -f /usr/local/sbin/pitnc_setparams ];
   then
      if [ foo$2 != "foo" ];
      then
         echo "ERROR!  I2C has no parameters.  See tarpn help. "
         exit 1
      fi
      echo "Scanning for attached TNC-PIs"
      echo "note: Addresses found are shown in HEXADECIMAL."
      sudo i2cdetect -y 1
   else
      echo "ERROR!  Critical utility is not found."
      sleep 1
      echo "#####   I am attempting to fix the problem.  If this happens again,"
      echo "#####    then please run 'tarpn sysinfo' and then capture your terminal"
      echo "#####    and send it to Tadd, KA2DEW.  Thanks!"
      sleep 1
      wget http://www.tnc-x.com/params.zip
      unzip params.zip
      chmod +x pitnc*
      sudo mv pitnc* /usr/local/sbin
      sleep 1
      if [ -f /usr/local/sbin/pitnc_setparams ];
      then
         echo "##### Try running the command again.  It should work now"
      else
         ls -lrat /usr/local/sbin
         sleep 1
         echo "##### My fix didn't work.  Please do the stuff I just talked about above"
      fi
      echo "######"
      exit 1
   fi

   exit 0;
fi


############################################## PIBPQ LINKTEST
if [ $1 = "linktest" ];
then
   if [ foo$2 = "foo" ];
   then
      echo "ERROR!  LINKTEST requires a port number, in decimal."
      exit 1
   fi
   if [ foo$3 != "foo" ];
   then
      echo "ERROR!  LINKTEST requires a single parameter which will be the"
      echo "        port number parameter, in decimal."
      exit 1
   fi

   if ! [ $# -eq 2 -o "$2" -eq "$2" ] 2>/dev/null; then
      echo "ERROR!  LINKTEST requires a single parameter which will be the"
      echo "        port number parameter, in decimal."
      exit 1
   fi
   if [ $2 -eq 0 ]; then
      echo "ERROR!  port #0 is not legal for LINKTEST.  "
      exit 1
   fi

   check_process "linbpq"
   if [ $? -ge 1 ]; then
      echo "starting linktest transmissions to port $2"
      /usr/local/sbin/linktest $2
      exit 0
   else
      echo "ERROR!  LINKTEST cannot be run without the G8BPQ node software."
      echo "        Start the node in another window using TARPN TEST."
      echo "        or run the node as a service using TARPN SERVICE START."
      exit 1
   fi
   exit 0
fi

############################################## PIBPQ LISTEN
if [ $1 = "listen" ];
then
   if [ foo$2 = "foo" ];
   then
      echo "ERROR!  LISTEN requires a port number, in decimal."
      echo "        LISTEN will monitor one node port"
      echo "        and show packets received."
      exit 1
   fi
   if [ foo$3 != "foo" ];
   then
      echo "ERROR!  LISTEN requires a single parameter which will be the"
      echo "        port number parameter, in decimal."
      exit 1
   fi

   if ! [ $# -eq 2 -o "$2" -eq "$2" ] 2>/dev/null; then
      echo "ERROR!  LISTEN requires a single parameter which will be the"
      echo "        port number parameter, in decimal."
      exit 1
   fi
   if [ $2 -eq 0 ]; then
      echo "ERROR!  port #0 is not legal for LISTEN.  "
      exit 1
   fi

   check_process "linbpq"
   if [ $? -ge 1 ]; then
      echo "starting listen reception from port $2"
      /usr/local/sbin/listen $2
      exit 0
   else
      echo "ERROR!  LISTEN cannot be run without the G8BPQ node software."
      echo "        Start the node in another window using PIBPQ TEST."
      echo "        or run the node as a service using PIBPQ SERVICE START."
      exit 1
   fi
fi

############################################## PIBPQ ASYNC-GET
if [ $1 = "async-get" ];
then
   if [ -f /home/pi/pitnc_getparams ];
   then
      sudo mv pitnc* /usr/local/sbin
   fi
   if [ -f /usr/local/sbin/pitnc_getparams ];
   then
      if [ foo$2 != "foo" ];
      then
         echo "ERROR!  ASYNC-GET does not need a parameter. "  
         exit 1
      fi
      /usr/local/sbin/pitnc_getparams 0 0 
   else
      echo "ERROR!  Critical utility is not found.  Please capture your terminal session."
      echo "        and grap the contents of the PIBPQ sysinfo"
      exit 1
   fi

   exit 0;
fi



############################################## PIBPQ I2C-ASSIGN
if [ $1 = "i2c-assign" ];
then
   if [ -f /home/pi/pitnc_getparams ];
   then
      sudo mv pitnc* /usr/local/sbin
   fi
   check_process "linbpq"
   if [ $? -ge 1 ]; then
       echo "ERROR!  I2C-ASSIGN cannot be run if the G8BPQ node software is running."
       echo "        Quit the node software and/or perform service stop if necessary."
       exit 1
   fi
   if [ -f /usr/local/sbin/pitnc_setparams ];
   then
      if [ foo$2 != "foo" ];
      then
         echo "ERROR!  I2C-ASSIGN does not need a parameter.  When the assign is complete,"
         echo "        any connected TNC-PI in async mode will have an I2C address of 9."
         echo "        Only do this command with one TNC-PI connected! "  
         exit 1
      fi


      echo "NOTICE!!!  "
      echo "Run this with only one TNC-PI connected."
      echo "..." 
      echo "If the TNC-PI doesn't show up in the i2c chart after running, then try"
      echo "resetting the TNC-PI by:"
      echo "  - turn TXDELAY pot all the way counter-clockwise"
      echo "  - apply power to the TNC, "
      echo "  - turn TXDELAY back to the right,"
      echo "  - apply power to the TNC-PI again."
      echo "  - run       tarpn i2c-assign      again."
      echo "..." 
      echo "..." 
      echo "..." 


      if [ $_is_raspberry_pi_3 -ne 0 ]; then
          echo -n "i2c-assign called from a Raspberry PI 3B or later     @" >> $LOGFILE
          date >> $LOGFILE

         
          sleep 1
          grep "dtoverlay" /boot/config.txt >> $LOGFILE
          if grep -q "dtoverlay=pi3-disable-bt" /boot/config.txt; then
              echo "##### it looks like we should have access to the async serial port.. Good."
              sudo /usr/local/sbin/pitnc_setparams /dev/serial0 0 7 9
              sleep 2
              sudo /usr/local/sbin/pitnc_setparams /dev/serial0 0 15 2
              sleep 4
              sudo i2cdetect -y 1
          else
              echo "##### dtoverlay=pi3-disable-bt  not found in config.txt. "  >> $LOGFILE
              echo "##### This Raspberry PI was not set up for access to the TNC-PI async bus. "
              echo "##### dtoverlay=pi3-disable-bt  not found in config.txt.   "
              echo "#####"
              sleep 2
              echo "#####"
              echo "##### The Bluetooth feature of the modern Raspberry PI is not compatible with"
              echo "##### async access to the TNC-PI."
              echo "#####"
              echo "##### In order to do the assign operation we have"
              echo "##### to switch the serial port from bluetooth to the expansion bus."
              sleep 2
              echo "#####"
              echo "##### If this isn't what you want, use ^C now to stop the i2c-assign."
              sleep 4
              echo "#####"
              sleep 2
              echo "#####  Proceeding with the switch of the serial port."
              sleep 2
              echo "#####"
              sleep 2
              echo "#####"
              sleep 2
              echo "##### Put it there. "  >> $LOGFILE
              sudo rm -f /home/pi/config.work
              echo "Deleted /home/pi/config.work "  >> $LOGFILE
              sudo cp /boot/config.txt /home/pi/config.work
              echo "copied config.txt to home/pi/config.work "  >> $LOGFILE
              sudo chown pi /home/pi/config.work
              echo "changed ownership of home/pi/config.work to pi"  >> $LOGFILE
              echo "dtoverlay=pi3-disable-bt" >> config.work
              echo "added dtoverlay..disable bluetooth to end of config.work"  >> $LOGFILE
              sudo chown root /home/pi/config.work
              echo "changed ownership of /home/pi/config.work back to root"  >> $LOGFILE
              sudo mv /home/pi/config.work /boot
              echo "moved /home/pi/config.work to /boot"  >> $LOGFILE
              sudo mv /boot/config.work /boot/config.txt
              echo "moved /boot/config.work to /boot/config.txt"  >> $LOGFILE
              sudo rm -f /home/pi/config.work
              echo "deleted /boot/config.work"  >> $LOGFILE
              sudo systemctl disable hciuart
              sudo systemctl disable serial-getty@ttyAMA0.service
              echo "######"
              echo "######"
              echo "###### You'll need to do"
              echo "###### pibpq reboot."
              echo "###### now."
              echo "######"
              echo "######"
              echo "######"
              exit 1
          fi
      fi
      echo -n "tarpn i2c-assign doing a setparams to uart           @" >> $LOGFILE
      date >> $LOGFILE
      echo "Assigning I2C address 9 to the ASYNC TNC-PI."
      echo "Unfortunately there isn't much error checking on this."
      echo "If you see retrying messages, then this isn't working."
      echo "Perhaps in that case your TNC-PI is not in ASYNC mode? "
      echo "-- or do tarpn reboot -- and try again"
      echo
      sudo /usr/local/sbin/pitnc_setparams 0 0 7 9
      echo
      sleep 1
      echo "done"
      echo "now sending a RESET command to the TNC-PI.  This may result in the command"
      echo "getting stuck in a RETRY sequence.  That's ok.  Just do control-C followed"
      echo "by sending a tarpn i2c  command to see what is on the i2c bus.  Your TNC-PI"
      echo "should have been assigned its new i2c address."
      sleep 1
      sudo /usr/local/sbin/pitnc_setparams 0 0 15 2
      echo "done"
      sleep 4
      echo "If this doesn't work, try using sudo raspi-config and check"
      echo "the Interfacing Options->Serial.  Login Shell should be <NO> but serial"
      echo "port hardware should be <YES>"
      echo "."
      echo "Scanning for attached TNC-PIs -- note: Addresses found are shown in HEXADECIMAL."
      sudo i2cdetect -y 1
   else
      echo "ERROR!  Critical utility is not found.  Please capture your terminal session."
      echo "        and grap the contents of the tarpn sysinfo"
      echo "        Email to Tadd, KA2DEW.  Thanks!"
      exit 1
   fi

   exit 0;
fi


############################################## PIBPQ I2C-BEEP
if [ $1 = "i2c-beep" ];
then
   if [ -f /home/pi/pitnc_getparams ];
   then
      sudo mv pitnc* /usr/local/sbin
   fi
   check_process "linbpq"
   if [ $? -ge 1 ]; then
       echo "ERROR!  I2C-BEEP cannot be run if the G8BPQ node software is running."
       echo "        Quit the node software and/or perform service stop if necessary."
       exit 1
   fi
   if [ -f /usr/local/sbin/pitnc_setparams ];
   then
      if [ foo$2 = "foo" ];
      then
         echo "ERROR!  I2C-BEEP requires 1 numerical parameter. "
         echo "        Parameter # 2 is an I2C address parameter, in decimal."
         echo "        example: tarpn i2c-beep 4 will cause the TNC-PI at"
         echo "                 address 4 to do a transmission with two beeps."
         exit 1
      fi
      if [ foo$3 != "foo" ];
      then
         echo "ERROR!  I2C-BEEP requires 1 decimal numerical parameters."
         echo "        example: tarpn i2c-beep 4 will cause the TNC-PI at"
         echo "                 address 4 to do a transmission with two beeps."
         exit 1
      fi
      if [ $2 -eq 0 ]; then
         echo "ERROR!  Attempt to do I2C-BEEP test at I2C address to 0!"
         echo "        That is not a legal I2C address on the Raspberry PI."
         echo "        Find out your TNC-PI I2C address with tarpn i2c"
         exit 1
      fi
      if [ $2 -eq 1 ]; then
         echo "ERROR!  Attempt to do I2C-BEEP test at I2C address to 1!"
         echo "        That is not a legal I2C address on the Raspberry PI."
         echo "        Find out your TNC-PI I2C address with tarpn i2c"
         exit 1
      fi
      if [ $2 -eq 2 ]; then
         echo "ERROR!  Attempt to do I2C-BEEP test at I2C address to 2!"
         echo "        That is not a legal I2C address on the Raspberry PI."
         echo "        Find out your TNC-PI I2C address with tarpn i2c"
         exit 1
      fi
      /usr/local/sbin/pitnc_setparams 1 $2 15 3
      echo "###### BEEP test sent to TNC-PI at I2C address $2"
      exit 0
   fi
   echo "##### ERROR - malfunction.  /usr/local/sbin/pitnc_setparams seems to be missing???"
   exit 1
fi


############################################## PIBPQ I2C-SET
if [ $1 = "i2c-set" ];
then
   if [ -f /home/pi/pitnc_getparams ];
   then
      sudo mv pitnc* /usr/local/sbin
   fi
   check_process "linbpq"
   if [ $? -ge 1 ]; then
       echo "ERROR!  I2C-SET cannot be run if the G8BPQ node software is running."
       echo "        Quit the node software and/or perform service stop if necessary."
       exit 1
   fi
   if [ -f /usr/local/sbin/pitnc_setparams ];
   then
      if [ foo$2 = "foo" ];
      then
         echo "ERROR!  I2C-SET requires 3 numerical parameters. "
         echo "        The first numerical parameter is an I2C address parameter, in decimal."
         echo "        example: tarpn i2c-set 25 1 64  will write to TNC-PI at"
         echo "                 address 25  and will set parameter 1 to 64."
         exit 1
      fi
      if [ foo$3 = "foo" ];
      then
         echo "ERROR!  I2C-SET requires 3 decimal numerical parameters."
         echo "        example: tarpn i2c-set 25 1 64  will write to TNC-PI at"
         echo "                 address 25  and will set register 1 to 64."
         exit 1
      fi
      if [ foo$4 = "foo" ];
      then
         echo "ERROR!  I2C-SET requires 3 decimal numerical parameters."
         echo "        example: tarpn i2c-set 25 1 64  will write to TNC-PI at"
         echo "                 address 25  and will set register 1 to 64."
         exit 1
      fi
      if [ foo$5 != "foo" ];
      then
         echo "ERROR!  I2C-SET requires 3 decimal numerical parameters."
         echo "        example: tarpn i2c-set 25 1 64  will write to TNC-PI at"
         echo "                 address 25  and will set register 1 to 64."
         exit 1
      fi
      if ! [ $# -eq 4 -o "$2" -eq "$2" ] 2>/dev/null;
      then
         echo "ERROR!  I2C-SET requires 3 decimal numerical parameters."
         echo "        example: tarpn i2c-set 25 1 64  will write to TNC-PI at "
         echo "                 address 25  and will set register 1 to 64."
         exit 1
      fi
      if ! [ $# -eq 4 -o "$3" -eq "$3" ] 2>/dev/null;
      then
         echo "ERROR!  I2C-SET requires 3 decimal numerical parameters."
         echo "        example: tarpn i2c-set 25 1 64  will write to TNC-PI at"
         echo "                 address 25  and will set register 1 to 64."
         exit 1
      fi
      if ! [ $# -eq 4 -o "$4" -eq "$4" ] 2>/dev/null;
      then
         echo "ERROR!  I2C-SET requires 3 decimal numerical parameters."
         echo "        example: tarpn i2c-set 25 1 64  will write to TNC-PI at"
         echo "                 address 25  and will set register 1 to 64."
         exit 1
      fi
      if [ $3 -eq 7 ]; then
         ## we are writing the TNC-PI address
         if [ $4 -eq 0 ]; then
            echo "ERROR!  Attempt to set I2C address to 0!"
            echo "I2C address 0 would not be good.  Use one of 3 through 9."
            exit 1
         fi
         if [ $4 -eq 1 ]; then
            echo "ERROR!  Attempt to set I2C address to 1!"
            echo "ERROR!  I2C address 1 would not be good.  Use one of 3 through 9."
            exit 1
         fi
         if [ $4 -eq 2 ]; then
            echo "ERROR!  Attempt to set I2C address to 2!"
            echo "ERROR!  I2C address 2 would not be good.  Use one of 3 through 9."
            exit 1
         fi
      fi
      echo "Setting TNC-PI at address $2  register $3 to $4."
      echo "Note: If this does not affect the change, there may be a bad connection"
      echo "to the TNC-PI or noise getting into the TNC-PI from the radio."
      echo "Try unplugging the radio and then power cycle the TNC-PI."
      /usr/local/sbin/pitnc_setparams 1 $2 $3 $4
          if [ $3 -eq 7 ]; then
             sleep 1
             echo "sending reset to the TNC-PI to let it move to new I2C address."
         /usr/local/sbin/pitnc_setparams 1 $2 15 2
             sleep 2
         sudo i2cdetect -y 1
      fi


      echo "done"
   else
      echo "ERROR!  Critical utility is not found.  Please capture your terminal session."
      exit 1
   fi

   exit 0;
fi

############################################## PIBPQ I2C-GET
if [ $1 = "i2c-get" ];
then
   if [ -f /home/pi/pitnc_getparams ];
   then
      sudo mv pitnc* /usr/local/sbin
   fi
   check_process "linbpq"
   if [ $? -ge 1 ]; then
       echo "ERROR!  I2C-GET cannot be run if the G8BPQ node software is running."
       echo "        Quit the node software and/or perform service stop if necessary."
       exit 1
   fi
   if [ -f /usr/local/sbin/pitnc_setparams ];
   then
      if [ foo$2 = "foo" ];
      then
         echo "ERROR!  I2C-GET requires a decimal i2c address. "
         echo "        example: tarpn i2c-get 25  will read the TNC-PI at"
         echo "                 address 25  and print the registers."
         exit 1
      fi
      if [ foo$3 != "foo" ];
      then
         echo "ERROR!  I2C-GET requires a decimal i2c address. "
         echo "        example: tarpn i2c-get 25  will read the TNC-PI at"
         echo "                 address 25  and print the registers."
         exit 1
      fi
      if ! [ $# -eq 4 -o "$2" -eq "$2" ] 2>/dev/null;
      then
         echo "ERROR!  I2C-GET requires a decimal i2c address. "
         echo "        example: tarpn i2c-get 25  will read the TNC-PI at"
         echo "                 address 25  and print the registers."
         exit 1
      fi
      echo "Getting TNC-PI registers at address $2"
      echo "Verify proper response by observing the returned I2C Address."
      echo "Inconsistant results may be caused by malfunction in the TNC-PI caused by"
      echo "received data arriving from the radio while node software is shut down."
      /usr/local/sbin/pitnc_getparams 1 $2
      echo "done"
   else
      echo "ERROR!  Critical utility is not found.  Please capture your terminal session."
      exit 1
   fi

   exit 0;
fi



   # "i2c-get  -- read all parameters from a TNC-PI at a particular address"
   # "            use with TNC-PI address in decimal.  Reads all parameters."
   # "            Example:"
   # "            tarpn i2c-get 16   reads all from TNC-PI at i2c address 16 decimal."


############################################## PIBPQ TX
if [ $1 = "tx" ];
then
   check_process "linbpq"
   if [ $? -ge 1 ]; then
       echo "#####  Use control ] and then quit<return> to exit."
       echo "#####  When this starts, just type your callsign and the telnet password"
       echo "#####  listed in the pibpq config."
       telnet 127.0.1.1 8010
           exit 1;
        else
       echo "##### ERROR! Node is not running.  TX needs the node to be running."
       exit 0;
        fi
fi


############################################## PIBPQ HOST
if [ $1 = "host" ];
then
   check_process "piminicom"
   if [ $? -ge 1 ]; then
      sudo killall piminicom
   fi
   check_process "linbpq"
   if [ $? -ge 1 ]; then
      if [ -f /home/pi/minicom/minicom.scr ];
      then
         echo "##### Starting Minicom for Host -inbound- connection"
         sudo modprobe snd_bcm2835    #### Turns on audio player so the "RING" will play
         cd /home/pi/minicom          #### Need to be in the proper directory so script is read properly
         /home/pi/minicom/piminicom -w -D /home/pi/minicom/com8 -S minicom.scr
         cd ~
         exit 0;
      else
          echo "#####  Error: Minicom is missing a critical script."
          exit 1
      fi
   else
      echo "##### ERROR! Node is not running.  HOST needs the node to be running."
      exit 1;
   fi
fi

############################################## PIBPQ DAEMON
if [ $1 = "daemon" ]; then
   echo "#####            This function starts a continuous 'TAIL' of the"
   echo "                 daemon log file.  This is equivalent of doing"
   echo "                 tail -f /var/log/daemon.log"
   echo "#####        --  To exit, do control C"
   sleep 0.5
   tail -f /var/log/daemon.log
   exit 0
fi
############################################## PIBPQ DAEMON
if [ $1 = "damon" ]; then
   echo "#####            This function starts a continuous 'TAIL' of the"
   echo "                 daemon log file.  This is equivalent of doing"
   echo "                 tail -f /var/log/daemon.log"
   echo "#####        --  To exit, do control C"
   sleep 0.5
   tail -f /var/log/daemon.log
   exit 0
fi
############################################## PIBPQ DAEMON
if [ $1 = "damen" ]; then
   echo "#####            This function starts a continuous 'TAIL' of the"
   echo "                 daemon log file.  This is equivalent of doing"
   echo "                 tail -f /var/log/daemon.log"
   echo "#####        --  To exit, do control C"
   sleep 0.5
   tail -f /var/log/daemon.log
   exit 0
fi
############################################## PIBPQ DAEMON
if [ $1 = "daemen" ]; then
   echo "#####            This function starts a continuous 'TAIL' of the"
   echo "                 daemon log file.  This is equivalent of doing"
   echo "                 tail -f /var/log/daemon.log"
   echo "#####        --  To exit, do control C"
   sleep 0.5
   tail -f /var/log/daemon.log
   exit 0
fi

############################################## PIBPQ CONSPY
if [ $1 = "conspy" ]; then
   echo "#####            After conspy starts, hit a few RETURNs to get"
   echo "                 down to the bottom of the text.  You may have to"
   echo "                 do this after CONSPY is running as well."
   echo "##### CONSPY --  To exit, hit ESCAPE 3 times in a row."
   sleep 1
   echo "##### CONSPY --  To exit, hit ESCAPE 3 times in a row."
   sleep 1
   echo "##### CONSPY --  To exit, hit ESCAPE 3 times in a row."
   sleep 1
   sudo conspy 2;
   exit 0
fi

############################################## PIBPQ REBOOT
if [ $1 = "reboot" ]; then
   echo "#####"
   echo "##### REBOOT --  Shutting down, doing file system check and rebooting."
   sudo touch /forcefsck
   uptime
   sudo shutdown -r now;
   exit 0
fi

############################################## PIBPQ SHUTDOWN
if [ $1 = "shutdown" ]; then
   echo "#####"
   echo "##### SHUTDOWN --  Shutting down, holding.  Do manual power cycle to restart."
   sudo touch /forcefsck
   uptime
   sudo shutdown -h now;
   exit 0
fi

############################################## PIBPQ USB
if [ $1 = "usb" ]; then
   echo "#####"
   echo "##### USB -- Show ttyUSB and ttyACM devices (NinoTNC) found in /dev"
   echo "#####"
   echo "#####   --- start"
   ls  /dev | grep -ettyACM -ettyUSB --color=never
   echo "#####   --- end"
   echo 
   echo "#####"
   exit 0
fi

############################################## PIBPQ TEST
if [ $1 = "test" ]; then
   echo "#####"
   echo "##### TEST --  Starts BPQ node immediately and runs it in the foreground until"
   echo "#####          a control C is issued in this window, or until a   pibpq stop"
   echo "#####          command is issued in another window."
   #### Check that linbpq is already running
   echo
   check_process "linbpq"
   if [ $? -ge 1 ]; then
       echo "#####  ERROR!  BPQ is already running.  Aborting TEST command."
       exit 1;
    else
       if grep -q "BACKGROUND:ON" /usr/local/etc/background.ini; then
          echo "##### ERROR!   BPQ node is already scheduled for to run as a service (automatic).  "
          echo "#####       Before doing test you must do    pibpq service stop"
          exit 1
       fi
    fi
fi;
    echo "tarpn usb "
    echo "#####"
    echo "##### Show ttyUSB and ttyACM devices (NinoTNC) found in /dev"
    echo "#####"
    echo "#####   ------------- start"
    ls  /dev | grep -ettyACM -ettyUSB --color=never
    echo "#####   ------------- end"
    echo 
    echo "##### "
    echo "##### Show I2C addresses"
    echo "Scanning for attached TNC-PIs"
    echo "note: Addresses found are shown in HEXADECIMAL."
    sudo i2cdetect -y 1
     
    echo "##### "
    echo "##### "
    echo "##### Starting BPQ Node by calling RUNBPQ.SH"
    source /usr/local/sbin/runbpq.sh;
    echo "##### --- back from RUNBPQ.SH"
    exit 0;
fi

 # "kill     -- Performs a system kill to the BPQ node process.  This will cause"
 # "            the node to start over.  This also re-reads the node.ini file."
 #
 # "service  -- Check or control the operation of the G8BPQ node as a background"
 # "            service.  Use this with: start  or  stop"
 # "            pibpq service start    will write to INITTAB and will configure the"
 # "                                   operating system to automatically launch"
 # "                                   G8BPQ node every time it comes up and will"
 # "                                   launch it again if it quits or is killed."
 # "            pibpq service stop     will delete G8BPQ from the INITTAB so the"
 # "                                   next time the OS boots it will NOT start the"
 # "                                   node automatically."
############################################## PIBPQ SERVICE
if [ $1 = "service" ]; then
   if [ foo$2 = "foo" ]; then
      echo "##### pibpq service"
      echo "2 options are available"
      echo "pibpq service start"
      echo "pibpq service stop"
      echo
      if grep -q "BACKGROUND:ON" /usr/local/etc/background.ini; then
        echo "#####  BPQ node is being run as a Service (AUTO)"
      else
        echo "#####  BPQ node is not set to run as a Service (!AUTO)"
      fi
      check_process "linbpq"
      if [ $? -ge 1 ]; then
         echo "#####  BPQ node is running."
      else
         echo "#####  BPQ node is NOT running."
      fi
      exit 1;
   fi


   if [ $2 = "stop" ]; then
        echo "#### pibpq service stop"
        sleep 1
        #### Check that linbpq is turned on in background.ini
        if grep -q "BACKGROUND:ON" /usr/local/etc/background.ini; then
             echo "##### BPQ node was scheduled for automatic.  Turning off..."
             sudo sed -i "s=BACKGROUND:ON=BACKGROUND:OFF=" /usr/local/etc/background.ini
             echo "##### BPQ node background service mode has been turned off"
             sleep 5
             check_process "linbpq"
             if [ $? -ge 1 ]; then
                check_process "piminicom"
                if [ $? -ge 1 ]; then
                   sudo killall piminicom
                fi
                sleep 1
                sudo killall linbpq
                check_process "python"
                if [ $? -ge 1 ]; then
                    sudo killall python
                fi
             echo "##### KILL has been issued for BPQ node."
             fi
        else
             echo "ERROR! BPQ node was apparently not scheduled to run automatically"
             echo "       Exit with no changes"
        fi
        exit 1;
   fi

   if [ $2 = "start" ]; then
      echo "#### pibpq service start"
      sleep 1
      ###Start LinBPQ on bootup and respawn it should it crash
      #BPQ:2345:respawn:/usr/local/sbin/runbpq.sh >/dev/tty2

      #### Check that linbpq is turned on in background.ini
      if grep -q "BACKGROUND:ON" /usr/local/etc/background.ini; then
            echo "##### ERROR!   BPQ node is already scheduled for automatic.  "
            rm -f $TEMP_PARSE_FILE2
            exit 1
      fi
      rm -f $TEMP_PARSE_FILE2

       ###  sudo sed -i "s=BPQ:2345:respawn=#BPQ:stopped:respawn=" /etc/inittab

      echo "#####"
      echo "#####    Do not start BPQ as a service until"
      echo "#####    you have tested it with pibpq test"
      echo "#####"
      sleep 1
      check_process "linbpq"
      if [ $? -ge 1 ]; then
         check_process "piminicom"
         if [ $? -ge 1 ]; then
            sudo killall piminicom
         fi
         #### kill off linbpq
         sudo killall linbpq
         echo "##### KILL has been issued for BPQ node."
         check_process "python"
         if [ $? -ge 1 ]; then
             sudo killall python
         fi
      fi
      echo "#####"
      echo "#####     Use control C to cancel this action if you have not performed testing"
      echo "#####"
      echo_sleep_countdown
      check_process "linbpq"
      if [ $? -ge 1 ]; then
         sleep 5
         #### kill off linbpq
         check_process "piminicom"
         if [ $? -ge 1 ]; then
             sudo killall piminicom
         fi
         check_process "python"
         if [ $? -ge 1 ]; then
             sudo killall python
         fi
         echo "##### node was found to be running.  did it just start?"
         echo "#####  KILL has been issued for BPQ node."
         sleep 1
       fi

       ##### turn on background execution of pilinbpq
       sudo sed -i "s=BACKGROUND:OFF=BACKGROUND:ON=" /usr/local/etc/background.ini
       echo "BPQ node background service started"
       exit 0;
   fi
   if [ $2 = "help" ]; then
      echo "#### pibpq service help"
      echo "2 options are available"
      echo "pibpq service start"
      echo "pibpq service stop"
      exit 1;
   fi
      echo "##### ERROR"
      echo "##### pibpq service   --- unknown option"
      echo "2 options are available"
      echo "pibpq service start"
      echo "pibpq service stop"
      exit 1;
   fi

if [ $1 = "stop" ]; then
   echo "#####"
   echo "#####   STOP??   This command used to do a KILL on the node."
   echo "#####            Replaced by the   tarpn kill    command."
   echo "#####"
   exit 1;
   fi

if [ $1 = "kill" ]; then
   echo "#####"
   echo "#####"
   echo "##### KILL  -- Immediately do a KILL of the BPQ node process.  "
   echo "#####          If the BPQ node is set to run automatically this"
   echo "#####          will cause it to terminate and reload, with the"
   echo "#####          side effect of reloading nodes.ini and rebuilding."
 
   sleep 0.5
   echo "#####"
   sleep 1
   check_process "python"
   if [ $? -ge 1 ]; then
       sudo killall python
   fi
   #### Check that linbpq is turned on in inittab.
   if grep -q "BACKGROUND:ON" /usr/local/etc/background.ini; then
      echo "##### BPQ node is scheduled for automatic."
   fi

   check_process "linbpq"
   if [ $? -ge 1 ]; then
       check_process "piminicom"
       if [ $? -ge 1 ]; then
          sudo killall piminicom
       fi
           sudo killall linbpq
           echo "##### KILL has been issued for BPQ node."
           exit 0;
        else
       echo "##### ERROR! BPQ node does not appear to be running."
       rm -f ~/temp_resetbpq;
           exit 1;
        fi
fi

 
echo "##### ERROR!   argument not recognized. "
echo "#####          Use tarpn help for a list of arguments."
exit 0
